import cv2
import mediapipe as mp

# Initialize MediaPipe hands solution
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Initialize the Hands object, specify the detection and tracking confidence
hands = mp_hands.Hands(
    max_num_hands=4,  # Maximum number of hands to detect
    min_detection_confidence=0.7,  # Minimum detection confidence
    min_tracking_confidence=0.7  # Minimum tracking confidence
)

# Initialize video capture for webcam
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break
    
    # Flip the frame horizontally for a mirror effect
    frame = cv2.flip(frame, 1)

    # Convert the frame color from BGR to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame to detect hands
    result = hands.process(rgb_frame)

    # If hands are detected, loop through each hand
    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            # Draw hand landmarks and connections on the frame
            mp_drawing.draw_landmarks(
                frame, 
                hand_landmarks, 
                mp_hands.HAND_CONNECTIONS,  # Draw hand connections
                mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),  # Style for landmarks
                mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)  # Style for connections
            )
    
    # Display the frame with hand landmarks
    cv2.imshow('Hand Tracking', frame)

    # Stop if the user presses 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
